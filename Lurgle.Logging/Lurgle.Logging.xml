<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lurgle.Logging</name>
    </assembly>
    <members>
        <member name="T:Lurgle.Logging.Classes.CorrelationCache">
            <summary>
                Cache for correlation ids by thread
            </summary>
        </member>
        <member name="M:Lurgle.Logging.Classes.CorrelationCache.#ctor(System.Int32)">
            <summary>
                Correlation cache containing correlation ids by thread
            </summary>
            <param name="expiration"></param>
        </member>
        <member name="P:Lurgle.Logging.Classes.CorrelationCache.Count">
            <summary>
                Count of items in cache
            </summary>
        </member>
        <member name="M:Lurgle.Logging.Classes.CorrelationCache.Add(System.Int32,System.String)">
            <summary>
                Add a thread's correlation id to the cache
            </summary>
            <param name="threadId"></param>
            <param name="correlationId"></param>
        </member>
        <member name="M:Lurgle.Logging.Classes.CorrelationCache.Replace(System.Int32,System.String)">
            <summary>
                Replace a thread's correlation id in the cache
            </summary>
            <param name="threadId"></param>
            <param name="correlationId"></param>
        </member>
        <member name="M:Lurgle.Logging.Classes.CorrelationCache.Remove(System.Int32)">
            <summary>
                Remove a thread's correlation id from the cache
            </summary>
            <param name="threadId"></param>
        </member>
        <member name="M:Lurgle.Logging.Classes.CorrelationCache.Get(System.Int32)">
            <summary>
                Get a thread's correlation id from the cache
            </summary>
            <param name="threadId"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Classes.CorrelationCache.Contains(System.Int32)">
            <summary>
                Return whether a given thread's correlation id is in the cache
            </summary>
            <param name="threadId"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Classes.CorrelationCache.Clear">
            <summary>
                Remove all threads from the cache
            </summary>
        </member>
        <member name="T:Lurgle.Logging.Classes.LogProperty">
            <summary>
                Log property container
            </summary>
        </member>
        <member name="M:Lurgle.Logging.Classes.LogProperty.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
                LogProperty Constructor
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="destructure"></param>
        </member>
        <member name="P:Lurgle.Logging.Classes.LogProperty.Name">
            <summary>
                Property Name
            </summary>
        </member>
        <member name="P:Lurgle.Logging.Classes.LogProperty.Value">
            <summary>
                Property Value
            </summary>
        </member>
        <member name="P:Lurgle.Logging.Classes.LogProperty.Destructure">
            <summary>
                Destructure Property
            </summary>
        </member>
        <member name="T:Lurgle.Logging.Classes.SeqClient">
            <summary>
                HTTP Client handler for Seq or Splunk
            </summary>
        </member>
        <member name="M:Lurgle.Logging.Classes.SeqClient.#ctor">
            <summary>
                Return a HTTP Client Handler for Seq
            </summary>
            <returns></returns>
        </member>
        <member name="T:Lurgle.Logging.Destructurers.MaskDestructuringConfig">
            <summary>
                Add a mask destructurer configuration
            </summary>
        </member>
        <member name="M:Lurgle.Logging.Destructurers.MaskDestructuringConfig.WithMaskProperties(Serilog.Configuration.LoggerDestructuringConfiguration)">
            <summary>
                Mask configured properties
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="T:Lurgle.Logging.Destructurers.MaskDestructuringPolicy">
            <summary>
                Mask destructuring policy
            </summary>
        </member>
        <member name="M:Lurgle.Logging.Destructurers.MaskDestructuringPolicy.TryDestructure(System.Object,Serilog.Core.ILogEventPropertyValueFactory,Serilog.Events.LogEventPropertyValue@)">
            <summary>
                Try destructuring the property
            </summary>
            <param name="value"></param>
            <param name="propertyValueFactory"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Lurgle.Logging.Enrichers.MaskingEnricher">
            <summary>
                Mask event properties based on the configured masking policy
            </summary>
        </member>
        <member name="M:Lurgle.Logging.Enrichers.MaskingEnricher.Enrich(Serilog.Events.LogEvent,Serilog.Core.ILogEventPropertyFactory)">
            <summary>
                Process incoming events and mask their values if a match is found in the configured properties
            </summary>
            <param name="logEvent"></param>
            <param name="propertyFactory"></param>
        </member>
        <member name="M:Lurgle.Logging.Enrichers.MaskingEnricher.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Add a list of properties to the masking enricher
            </summary>
            <param name="maskProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Enrichers.MaskingEnricher.Add(System.String)">
            <summary>
                Add a single property to the masking enricher
            </summary>
            <param name="maskProperty"></param>
            <returns></returns>
        </member>
        <member name="T:Lurgle.Logging.Enrichers.PropertyBagEnricher">
            <summary>
                Add properties to logs - adapted from https://benfoster.io/blog/serilog-best-practices/
            </summary>
        </member>
        <member name="M:Lurgle.Logging.Enrichers.PropertyBagEnricher.#ctor">
            <summary>
                Creates a new <see cref="T:Lurgle.Logging.Enrichers.PropertyBagEnricher" /> instance.
            </summary>
        </member>
        <member name="M:Lurgle.Logging.Enrichers.PropertyBagEnricher.Enrich(Serilog.Events.LogEvent,Serilog.Core.ILogEventPropertyFactory)">
            <summary>
                Enriches the <paramref name="logEvent" /> using the values from the property bag.
            </summary>
            <param name="logEvent">The log event to enrich.</param>
            <param name="propertyFactory">The factory used to create the property.</param>
        </member>
        <member name="M:Lurgle.Logging.Enrichers.PropertyBagEnricher.Add(System.String,System.Object,System.Boolean)">
            <summary>
                Add a property that will be added to all log events enriched by this enricher.
            </summary>
            <param name="key">The property key.</param>
            <param name="value">The property value.</param>
            <param name="destructureObject">
                Whether to destructure the value. See https://github.com/serilog/serilog/wiki/Structured-Data
            </param>
            <returns>The enricher instance, for chaining Add operations together.</returns>
        </member>
        <member name="M:Lurgle.Logging.Enrichers.PropertyBagEnricher.Add(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
                Add properties that will be added to all log events enriched by this enricher.
            </summary>
            <param name="valueList">The property dictionary</param>
            <param name="destructureObject">
                Whether to destructure the value. See https://github.com/serilog/serilog/wiki/Structured-Data
            </param>
            <returns>The enricher instance, for chaining Add operations together.</returns>
        </member>
        <member name="M:Lurgle.Logging.Enrichers.PropertyBagEnricher.Add(System.Collections.Generic.IEnumerable{Lurgle.Logging.Classes.LogProperty})">
            <summary>
                Add properties that will be added to all log events enriched by this enricher.
            </summary>
            <param name="valueList"></param>
            <returns></returns>
        </member>
        <member name="T:Lurgle.Logging.ConsoleThemeType">
            <summary>
                Control the theme type used for the console
            </summary>
        </member>
        <member name="F:Lurgle.Logging.ConsoleThemeType.Literate">
            <summary>
                Literate theme
            </summary>
        </member>
        <member name="F:Lurgle.Logging.ConsoleThemeType.Grayscale">
            <summary>
                Grayscale theme
            </summary>
        </member>
        <member name="F:Lurgle.Logging.ConsoleThemeType.Colored">
            <summary>
                Colored theme
            </summary>
        </member>
        <member name="F:Lurgle.Logging.ConsoleThemeType.AnsiLiterate">
            <summary>
                Ansi Literate theme
            </summary>
        </member>
        <member name="F:Lurgle.Logging.ConsoleThemeType.AnsiGrayscale">
            <summary>
                Ansi Grayscale theme
            </summary>
        </member>
        <member name="F:Lurgle.Logging.ConsoleThemeType.AnsiCode">
            <summary>
                Ansi Code theme
            </summary>
        </member>
        <member name="T:Lurgle.Logging.FailureReason">
            <summary>
                Return a reason why a given log type failed
            </summary>
        </member>
        <member name="F:Lurgle.Logging.FailureReason.DirectoryNotFound">
            <summary>
                Could not find log file directory
            </summary>
        </member>
        <member name="F:Lurgle.Logging.FailureReason.DirectoryConfigEmpty">
            <summary>
                Log file directory not set
            </summary>
        </member>
        <member name="F:Lurgle.Logging.FailureReason.LogTestFailed">
            <summary>
                Failed to initialise logging for this log type
            </summary>
        </member>
        <member name="T:Lurgle.Logging.LogFileFormat">
            <summary>
                Control the format of text logs
            </summary>
        </member>
        <member name="F:Lurgle.Logging.LogFileFormat.Text">
            <summary>
                Text logs
            </summary>
        </member>
        <member name="F:Lurgle.Logging.LogFileFormat.Json">
            <summary>
                Json logs
            </summary>
        </member>
        <member name="T:Lurgle.Logging.LogType">
            <summary>
                Supported log types
            </summary>
        </member>
        <member name="F:Lurgle.Logging.LogType.Console">
            <summary>
                Console
            </summary>
        </member>
        <member name="F:Lurgle.Logging.LogType.File">
            <summary>
                File
            </summary>
        </member>
        <member name="F:Lurgle.Logging.LogType.EventLog">
            <summary>
                Windows Event Log
            </summary>
        </member>
        <member name="F:Lurgle.Logging.LogType.Seq">
            <summary>
                Seq
            </summary>
        </member>
        <member name="F:Lurgle.Logging.LogType.Splunk">
            <summary>
                Seq
            </summary>
        </member>
        <member name="F:Lurgle.Logging.LogType.Aws">
            <summary>
                AWS Cloudwatch Sink
            </summary>
        </member>
        <member name="F:Lurgle.Logging.LogType.All">
            <summary>
                All logs - can be used to return all logs being disabled
            </summary>
        </member>
        <member name="T:Lurgle.Logging.LurgLevel">
            <summary>
                Outlines the supported log levels. Abstracts Serilog <see cref="T:Serilog.Events.LogEventLevel" /> so that it does not need to be
                referenced outside of the <see cref="T:Lurgle.Logging.Logging" /> class.
            </summary>
        </member>
        <member name="F:Lurgle.Logging.LurgLevel.Fatal">
            <summary>
                Fatal
            </summary>
        </member>
        <member name="F:Lurgle.Logging.LurgLevel.Error">
            <summary>
                Error
            </summary>
        </member>
        <member name="F:Lurgle.Logging.LurgLevel.Warning">
            <summary>
                Warning
            </summary>
        </member>
        <member name="F:Lurgle.Logging.LurgLevel.Information">
            <summary>
                Information
            </summary>
        </member>
        <member name="F:Lurgle.Logging.LurgLevel.Debug">
            <summary>
                Debug
            </summary>
        </member>
        <member name="F:Lurgle.Logging.LurgLevel.Verbose">
            <summary>
                Verbose
            </summary>
        </member>
        <member name="T:Lurgle.Logging.MaskPolicy">
            <summary>
                Masking policy to be used when masking properties
            </summary>
        </member>
        <member name="F:Lurgle.Logging.MaskPolicy.None">
            <summary>
                No masking
            </summary>
        </member>
        <member name="F:Lurgle.Logging.MaskPolicy.MaskWithString">
            <summary>
                Mask with static string
            </summary>
        </member>
        <member name="F:Lurgle.Logging.MaskPolicy.MaskLettersAndNumbers">
            <summary>
                Mask characters and digits
            </summary>
        </member>
        <member name="T:Lurgle.Logging.Interfaces.IAddProperty">
            <summary>
                Property interface
            </summary>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IAddProperty.AddProperty(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
                Add an additional property for logging context
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="destructure"></param>
            <param name="keepEmptyValue"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IAddProperty.AddProperty(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
                Add an additional set of properties for logging context
            </summary>
            <param name="propertyPairs"></param>
            <param name="destructure"></param>
            <param name="keepEmptyValue"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IAddProperty.SetTimestamp(System.DateTimeOffset)">
            <summary>
                Set the log timestamp
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IAddProperty.Add(System.String,System.Object[])">
            <summary>
                Add a new log entry and apply parameters to the supplied log template
            </summary>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IAddProperty.Information(System.String,System.Object[])">
            <summary>
                Add an Information event and apply parameters to the supplied log template
            </summary>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IAddProperty.Information(System.Exception,System.String,System.Object[])">
            <summary>
                Add an Information event with an Exception and apply parameters
            </summary>
            <param name="ex"></param>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IAddProperty.Debug(System.String,System.Object[])">
            <summary>
                Add a Debug event and apply parameters to the supplied log template
            </summary>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IAddProperty.Debug(System.Exception,System.String,System.Object[])">
            <summary>
                Add a Debug event with an Exception and apply parameters
            </summary>
            <param name="ex"></param>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IAddProperty.Verbose(System.String,System.Object[])">
            <summary>
                Add a Verbose event and apply parameters to the supplied log template
            </summary>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IAddProperty.Verbose(System.Exception,System.String,System.Object[])">
            <summary>
                Add a Verbose event with an Exception and apply parameters
            </summary>
            <param name="ex"></param>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IAddProperty.Warning(System.String,System.Object[])">
            <summary>
                Add a Warning event and apply parameters to the supplied log template
            </summary>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IAddProperty.Warning(System.Exception,System.String,System.Object[])">
            <summary>
                Add a Warning event with an Exception and apply parameters
            </summary>
            <param name="ex"></param>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IAddProperty.Error(System.String,System.Object[])">
            <summary>
                Add an Error event and apply parameters to the supplied log template
            </summary>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IAddProperty.Error(System.Exception,System.String,System.Object[])">
            <summary>
                Add an Error event with an Exception and apply parameters
            </summary>
            <param name="ex"></param>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IAddProperty.Fatal(System.String,System.Object[])">
            <summary>
                Add a Fatal event and apply parameters to the supplied log template
            </summary>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IAddProperty.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
                Add a Fatal event with an Exception and apply parameters
            </summary>
            <param name="ex"></param>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="T:Lurgle.Logging.Interfaces.IExplicitLevel">
            <summary>
                Explicit level interface
            </summary>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IExplicitLevel.AddProperty(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
                Add an additional property for logging context
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="destructure"></param>
            <param name="keepEmptyValue"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IExplicitLevel.AddProperty(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
                Add an additional set of properties for logging context
            </summary>
            <param name="propertyPairs"></param>
            <param name="destructure"></param>
            <param name="keepEmptyValue"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IExplicitLevel.SetTimestamp(System.DateTimeOffset)">
            <summary>
                Set the log timestamp
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IExplicitLevel.Add(System.String,System.Object[])">
            <summary>
                Add a new log entry and apply parameters to the supplied log template
            </summary>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="T:Lurgle.Logging.Interfaces.IHideObjectMembers">
            <summary>
                Hide object members
            </summary>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IHideObjectMembers.GetType">
            <summary>
                Override GetType visibility
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IHideObjectMembers.GetHashCode">
            <summary>
                Override GetHashCode visibility
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IHideObjectMembers.ToString">
            <summary>
                Override ToString visibility
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.IHideObjectMembers.Equals(System.Object)">
            <summary>
                Override Equals visibility
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Lurgle.Logging.Interfaces.ILevel">
            <summary>
                Level interface
            </summary>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.ILevel.AddProperty(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
                Add an additional property for logging context
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="destructure"></param>
            <param name="keepEmptyValue"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.ILevel.AddProperty(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
                Add an additional set of properties for logging context
            </summary>
            <param name="propertyPairs"></param>
            <param name="destructure"></param>
            <param name="keepEmptyValue"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.ILevel.SetTimestamp(System.DateTimeOffset)">
            <summary>
                Set the log timestamp
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.ILevel.Add(System.String,System.Object[])">
            <summary>
                Add a new log entry and apply parameters to the supplied log template
            </summary>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.ILevel.Information(System.String,System.Object[])">
            <summary>
                Add an Information event and apply parameters to the supplied log template
            </summary>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.ILevel.Information(System.Exception,System.String,System.Object[])">
            <summary>
                Add an Information event with an Exception and apply parameters
            </summary>
            <param name="ex"></param>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.ILevel.Debug(System.String,System.Object[])">
            <summary>
                Add a Debug event and apply parameters to the supplied log template
            </summary>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.ILevel.Debug(System.Exception,System.String,System.Object[])">
            <summary>
                Add a Debug event with an Exception and apply parameters
            </summary>
            <param name="ex"></param>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.ILevel.Verbose(System.String,System.Object[])">
            <summary>
                Add a Verbose event and apply parameters to the supplied log template
            </summary>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.ILevel.Verbose(System.Exception,System.String,System.Object[])">
            <summary>
                Add a Verbose event with an Exception and apply parameters
            </summary>
            <param name="ex"></param>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.ILevel.Warning(System.String,System.Object[])">
            <summary>
                Add a Warning event and apply parameters to the supplied log template
            </summary>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.ILevel.Warning(System.Exception,System.String,System.Object[])">
            <summary>
                Add a Warning event with an Exception and apply parameters
            </summary>
            <param name="ex"></param>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.ILevel.Error(System.String,System.Object[])">
            <summary>
                Add an Error event and apply parameters to the supplied log template
            </summary>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.ILevel.Error(System.Exception,System.String,System.Object[])">
            <summary>
                Add an Error event with an Exception and apply parameters
            </summary>
            <param name="ex"></param>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.ILevel.Fatal(System.String,System.Object[])">
            <summary>
                Add a Fatal event and apply parameters to the supplied log template
            </summary>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Interfaces.ILevel.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
                Add a Fatal event with an Exception and apply parameters
            </summary>
            <param name="ex"></param>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="T:Lurgle.Logging.Interfaces.ILog">
            <summary>
                Base Log interface
            </summary>
        </member>
        <member name="T:Lurgle.Logging.Log">
            <summary>
                Log an event with Lurgle.Logging
            </summary>
        </member>
        <member name="P:Lurgle.Logging.Log.LogLevel">
            <summary>
                Log level for this log
            </summary>
        </member>
        <member name="P:Lurgle.Logging.Log.ErrorInfo">
            <summary>
                Exception attached to this log
            </summary>
        </member>
        <member name="M:Lurgle.Logging.Log.Dispose">
            <summary>
                Ensure that we flush and dispose the log writer
            </summary>
        </member>
        <member name="M:Lurgle.Logging.Log.SetTimestamp(System.DateTimeOffset,System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Set the log timestamp
            </summary>
            <param name="timestamp"></param>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Log.SetTimestamp(System.DateTimeOffset)">
            <summary>
                Set the log timestamp
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Log.AddProperty(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
                Add an additional property for logging context
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="destructure"></param>
            <param name="keepEmptyValue"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Log.AddProperty(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
                Add an additional set of properties for logging context
            </summary>
            <param name="propertyPairs"></param>
            <param name="destructure"></param>
            <param name="keepEmptyValue"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Log.AddProperty(System.String,System.Object,System.Boolean,System.String,System.Boolean,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Add an additional property for logging context
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="destructure"></param>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="keepEmptyValue"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Log.AddProperty(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.String,System.Boolean,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Add an additional set of properties for logging context
            </summary>
            <param name="propertyPairs"></param>
            <param name="destructure"></param>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="keepEmptyValue"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Log.AddProperty(System.Exception,System.String,System.Object,System.Boolean,System.String,System.Boolean,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Add an additional property for logging context and pass an exception
            </summary>
            <param name="ex"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="destructure"></param>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="keepEmptyValue"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Log.AddProperty(System.Exception,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.String,System.Boolean,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Add an additional set of properties for logging context and pass an exception
            </summary>
            <param name="ex"></param>
            <param name="propertyPairs"></param>
            <param name="destructure"></param>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="keepEmptyValue"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Log.AddProperty(Lurgle.Logging.LurgLevel,System.String,System.Object,System.Boolean,System.String,System.Boolean,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Set log level and add an additional property for logging context
            </summary>
            <param name="logLevel"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="destructure"></param>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="keepEmptyValue"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Log.AddProperty(Lurgle.Logging.LurgLevel,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.String,System.Boolean,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Set log level and add an additional set of properties for logging context
            </summary>
            <param name="logLevel"></param>
            <param name="propertyPairs"></param>
            <param name="destructure"></param>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="keepEmptyValue"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Log.AddProperty(System.Exception,Lurgle.Logging.LurgLevel,System.String,System.Object,System.Boolean,System.String,System.Boolean,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Set log level and exception, and add an additional property for logging context
            </summary>
            <param name="ex"></param>
            <param name="logLevel"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="destructure"></param>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="keepEmptyValue"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Log.AddProperty(System.Exception,Lurgle.Logging.LurgLevel,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.String,System.Boolean,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Set log level and exception,  and add an additional set of properties for logging context
            </summary>
            <param name="ex"></param>
            <param name="logLevel"></param>
            <param name="propertyPairs"></param>
            <param name="destructure"></param>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="keepEmptyValue"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Log.Add(System.String,System.Object[])">
            <summary>
                Add a new log entry and apply parameters to the supplied log template
            </summary>
            <param name="logTemplate">Log template that parameters will be applied to</param>
            <param name="args">Parameters for the log template</param>
        </member>
        <member name="M:Lurgle.Logging.Log.Information(System.String,System.Object[])">
            <summary>
                Add an Information event and apply parameters to the supplied log template
            </summary>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Information(System.Exception,System.String,System.Object[])">
            <summary>
                Add an Information event with an Exception and apply parameters
            </summary>
            <param name="ex"></param>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Debug(System.String,System.Object[])">
            <summary>
                Add a Debug event and apply parameters to the supplied log template
            </summary>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Debug(System.Exception,System.String,System.Object[])">
            <summary>
                Add a Debug event with an Exception and apply parameters
            </summary>
            <param name="ex"></param>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Verbose(System.String,System.Object[])">
            <summary>
                Add a Verbose event and apply parameters to the supplied log template
            </summary>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Verbose(System.Exception,System.String,System.Object[])">
            <summary>
                Add a Verbose event with an Exception and apply parameters
            </summary>
            <param name="ex"></param>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Warning(System.String,System.Object[])">
            <summary>
                Add a Warning event and apply parameters to the supplied log template
            </summary>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Warning(System.Exception,System.String,System.Object[])">
            <summary>
                Add a Warning event with an Exception and apply parameters
            </summary>
            <param name="ex"></param>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Error(System.String,System.Object[])">
            <summary>
                Add an Error event and apply parameters to the supplied log template
            </summary>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Error(System.Exception,System.String,System.Object[])">
            <summary>
                Add an Error event with an Exception and apply parameters
            </summary>
            <param name="ex"></param>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Fatal(System.String,System.Object[])">
            <summary>
                Add a Fatal event and apply parameters to the supplied log template
            </summary>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
                Add an Information event with an Exception and apply parameters
            </summary>
            <param name="ex"></param>
            <param name="logTemplate"></param>
            <param name="args"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Level(Lurgle.Logging.LurgLevel,System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Log an event with the specified level. Defaults to <see cref="F:Lurgle.Logging.LurgLevel.Information" />.
                CorrelationId can optionally be specified.
                Optionally, you can embed the method name in the event log text.
            </summary>
            <param name="logLevel"></param>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Log.Exception(System.Exception,Lurgle.Logging.LurgLevel,System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Log an Exception with the specified level. Defaults to <see cref="F:Lurgle.Logging.LurgLevel.Error" />.
                CorrelationId can optionally be specified.
                Optionally, you can embed the method name in the  event log text.
            </summary>
            <param name="ex"></param>
            <param name="logLevel"></param>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Log.Add(Lurgle.Logging.LurgLevel,System.String,System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Create a simple log entry with the specified level
            </summary>
            <param name="logLevel"></param>
            <param name="logTemplate"></param>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Add(System.Exception,Lurgle.Logging.LurgLevel,System.String,System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Create a simple log entry with the specified level and exception
            </summary>
            <param name="logLevel"></param>
            <param name="ex"></param>
            <param name="logTemplate"></param>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Add(System.String,System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Create a simple Information log entry
            </summary>
            <param name="logTemplate"></param>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Add(System.Exception,System.String,System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Create a simple Information log entry with exception
            </summary>
            <param name="ex"></param>
            <param name="logTemplate"></param>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Information(System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Create an Information event
            </summary>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Information(System.Exception,System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Create an Information event
            </summary>
            <param name="ex"></param>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Debug(System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Create a Debug event
            </summary>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Debug(System.Exception,System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Create a Debug event
            </summary>
            <param name="ex"></param>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Verbose(System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Create a Verbose event
            </summary>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Verbose(System.Exception,System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Create a Verbose event
            </summary>
            <param name="ex"></param>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Warning(System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Create a Warning event
            </summary>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Warning(System.Exception,System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Create a Warning event
            </summary>
            <param name="ex"></param>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Error(System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Create an Error event
            </summary>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Error(System.Exception,System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Create an Error event
            </summary>
            <param name="ex"></param>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Fatal(System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Create a Fatal event
            </summary>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
        </member>
        <member name="M:Lurgle.Logging.Log.Fatal(System.Exception,System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
                Create a Fatal event
            </summary>
            <param name="ex"></param>
            <param name="correlationId"></param>
            <param name="showMethod"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
        </member>
        <member name="T:Lurgle.Logging.Logging">
            <summary>
                Static Lurgle.Logging instance that provides an interface to properties and methods for logging
            </summary>
        </member>
        <member name="F:Lurgle.Logging.Logging.Cache">
            <summary>
                Correlation ID cache for individual threads
            </summary>
        </member>
        <member name="F:Lurgle.Logging.Logging.LogMethod">
            <summary>
                String format for adding the method name to logs
            </summary>
        </member>
        <member name="P:Lurgle.Logging.Logging.Config">
            <summary>
                Current Lurgle.Logging configuration
            </summary>
        </member>
        <member name="P:Lurgle.Logging.Logging.LogWriter">
            <summary>
                Currently configured Serilog Logger
            </summary>
        </member>
        <member name="P:Lurgle.Logging.Logging.CorrelationId">
            <summary>
                Current Correlation Id
            </summary>
        </member>
        <member name="P:Lurgle.Logging.Logging.LogFailures">
            <summary>
                Dictionary of <see cref="T:Lurgle.Logging.FailureReason" /> for why a given <see cref="T:Lurgle.Logging.LogType" /> failed
            </summary>
        </member>
        <member name="P:Lurgle.Logging.Logging.EnabledLogs">
            <summary>
                List of enabled <see cref="T:Lurgle.Logging.LogType" />
            </summary>
        </member>
        <member name="M:Lurgle.Logging.Logging.Close">
            <summary>
                Flush logs and dispose the logging interface. Used for application shutdown.
                <para />
                If this is called and then an attempt is made to write to the log, the log will be automatically initialised again.
            </summary>
        </member>
        <member name="M:Lurgle.Logging.Logging.GetLogFile">
            <summary>
                Return today's logfile for file logs
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Logging.GetLogConfig">
            <summary>
                Retrieve a logging configuration with enrichers and minimum log level
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Logging.SetCorrelationId(System.String)">
            <summary>
                Generate or set the <see cref="P:Lurgle.Logging.Logging.CorrelationId" /> or add/update one in the <see cref="F:Lurgle.Logging.Logging.Cache" />
                <para />
                CorrelationId is a static property if <see cref="P:Lurgle.Logging.LoggingConfig.EnableCorrelationCache" /> is not enabled. />
                <para />
                You can generate a new CorrelationId with <see cref="M:Lurgle.Logging.Logging.NewCorrelationId" />
            </summary>
            <param name="correlationId"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Logging.NewCorrelationId">
            <summary>
                Return a new CorrelationId and update <see cref="P:Lurgle.Logging.Logging.CorrelationId" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Logging.GetBaseProperties(System.String,System.String,System.String,System.Int32)">
            <summary>
                Return a dictionary comprised of the base properties that we pass to each event
            </summary>
            <param name="correlationId"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Logging.AddCommonProperty(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
                Add an additional static property for logging
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="destructure"></param>
            <param name="update"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Logging.AddCommonProperty(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
                Add an additional set of static properties for logging
            </summary>
            <param name="propertyPairs"></param>
            <param name="destructure"></param>
            <param name="update"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Logging.ResetCommonProperties">
            <summary>
                Clear the list of static properties
            </summary>
        </member>
        <member name="M:Lurgle.Logging.Logging.MaskProperty(System.Object)">
            <summary>
                Returns a masked property based on the masking policy
            </summary>
            <param name="propertyValue"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Logging.TestLogConfig(Lurgle.Logging.LogType,System.String,System.Boolean,System.String,System.String,System.String,System.Int32)">
            <summary>
                Test that the configured log type can be used
            </summary>
            <param name="logType"></param>
            <param name="correlationId"></param>
            <param name="manageSource"></param>
            <param name="fileName"></param>
            <param name="methodName"></param>
            <param name="sourceFilePath"></param>
            <param name="sourceLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.Logging.SetConfig(Lurgle.Logging.LoggingConfig)">
            <summary>
                Set the logging config. This will only set/update the config if there is no LogWriter currently set.
            </summary>
        </member>
        <member name="M:Lurgle.Logging.Logging.Init(System.String,System.String,System.String,System.Int32)">
            <summary>
                Initialise the logging interface. Checks that the configured log types are available and alerts if they aren't.
            </summary>
        </member>
        <member name="T:Lurgle.Logging.LoggingConfig">
            <summary>
                Logging configuration. Loaded from AppSettings if available but can be configured from code.
            </summary>
        </member>
        <member name="M:Lurgle.Logging.LoggingConfig.#ctor">
            <summary>
                LoggingConfig constructor
            </summary>
        </member>
        <member name="M:Lurgle.Logging.LoggingConfig.#ctor(Lurgle.Logging.LoggingConfig,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String,System.String,System.Collections.Generic.List{Lurgle.Logging.LogType},System.Collections.Generic.List{System.String},System.String,System.Nullable{Lurgle.Logging.MaskPolicy},System.String,System.String,System.Nullable{Lurgle.Logging.ConsoleThemeType},System.String,System.String,System.String,System.String,System.String,System.Nullable{Lurgle.Logging.LurgLevel},System.Nullable{Lurgle.Logging.LurgLevel},System.Nullable{Lurgle.Logging.LurgLevel},System.Nullable{Lurgle.Logging.LurgLevel},System.Nullable{Lurgle.Logging.LurgLevel},System.Nullable{Lurgle.Logging.LurgLevel},System.Nullable{Lurgle.Logging.LurgLevel},System.Nullable{Lurgle.Logging.LogFileFormat},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String)">
            <summary>
                Constructor that permits passing a config and optional overrides of any property
            </summary>
            <param name="config"></param>
            <param name="enableMethodNameProperty"></param>
            <param name="enableSourceFileProperty"></param>
            <param name="includeSourceFilePath"></param>
            <param name="enableLineNumberProperty"></param>
            <param name="enableCorrelationCache"></param>
            <param name="logWriteInit"></param>
            <param name="correlationCacheExpiry"></param>
            <param name="appName"></param>
            <param name="appVersion"></param>
            <param name="logType"></param>
            <param name="logMaskProperties"></param>
            <param name="logMaskPattern"></param>
            <param name="logMaskPolicy"></param>
            <param name="logMaskCharacter"></param>
            <param name="logMaskDigit"></param>
            <param name="logConsoleTheme"></param>
            <param name="logFolder"></param>
            <param name="logName"></param>
            <param name="logExtension"></param>
            <param name="logEventSource"></param>
            <param name="logEventName"></param>
            <param name="logLevel"></param>
            <param name="logLevelConsole"></param>
            <param name="logLevelFile"></param>
            <param name="logLevelEvent"></param>
            <param name="logLevelSeq"></param>
            <param name="logLevelSplunk"></param>
            <param name="logLevelAws"></param>
            <param name="logFileType"></param>
            <param name="logDays"></param>
            <param name="logFlush"></param>
            <param name="logShared"></param>
            <param name="logBuffered"></param>
            <param name="logSeqServer"></param>
            <param name="logSeqApiKey"></param>
            <param name="logSeqProxyPassword"></param>
            <param name="logSplunkHost"></param>
            <param name="logSplunkToken"></param>
            <param name="logAwsProfile"></param>
            <param name="logAwsProfileLocation"></param>
            <param name="logAwsKey"></param>
            <param name="logAwsSecret"></param>
            <param name="logAwsLogGroup"></param>
            <param name="logAwsRegion"></param>
            <param name="logAwsCreateLogGroup"></param>
            <param name="logFormatConsole"></param>
            <param name="logFormatEvent"></param>
            <param name="logFormatFile"></param>
            <param name="logSeqUseProxy"></param>
            <param name="logSeqProxyServer"></param>
            <param name="logSeqBypassProxyOnLocal"></param>
            <param name="logSeqProxyBypass"></param>
            <param name="logSeqProxyUser"></param>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.EnableMethodNameProperty">
            <summary>
                Set to false to disable the MethodName property
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.EnableSourceFileProperty">
            <summary>
                Set to false to disable the SourceFile property
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.IncludeSourceFilePath">
            <summary>
                Set to false to disable including the full path
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.EnableLineNumberProperty">
            <summary>
                Set to false to disable the LineNumber property
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogWriteInit">
            <summary>
                Write an "Initialising" event during Init's call to TestLogConfig
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.EnableCorrelationCache">
            <summary>
                Enable the correlation cache that allows for per-thread correlation ids
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.CorrelationCacheExpiry">
            <summary>
                Set how long a correlation id can remain in the cache in seconds
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.AppName">
            <summary>
                Meaningful app name that is used for logging. Will be auto-set if not specified.
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.AppVersion">
            <summary>
                App version will be determined from the binary version, but can be overriden
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogType">
            <summary>
                List of valid log types. At least one must be specified or an exception will be raised.
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogMaskProperties">
            <summary>
                Define properties that should be masked in logging
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogMaskPolicy">
            <summary>
                Define the applicable policy for masking - MaskWithString, MaskLettersAndNumbers
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogMaskPattern">
            <summary>
                Define the string pattern to use for masking if MaskWithString policy is used
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogMaskCharacter">
            <summary>
                Define the mask character to use for non-digit values in masking if MaskLettersAndNumbers is used
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogMaskDigit">
            <summary>
                Define the mask character to use for digit values in masking if MaskLettersAndNumbers is used
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogConsoleTheme">
            <summary>
                Select a console theme, defaults to Literate
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogFolder">
            <summary>
                Log folder for file logs
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogName">
            <summary>
                Log filename prefix for file logs. A hyphen and date will be auto-appended.
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogExtension">
            <summary>
                Log file extension. Defaults to .log
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogEventSource">
            <summary>
                Event Source name for Windows Event Logs
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogEventName">
            <summary>
                Log name for Windows Event Logs (eg. Application)
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogLevel">
            <summary>
                Minimum overall log level that will be written - Verbose, Debug, Information, Warning, Error, Fatal
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogLevelConsole">
            <summary>
                Minimum log level accepted by the Console sink
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogLevelFile">
            <summary>
                Minimum log level accepted by the File sink
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogLevelEvent">
            <summary>
                Minimum log level accepted by the Event Log sink
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogLevelSeq">
            <summary>
                Minimum log level accepted by the Seq sink
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogLevelSplunk">
            <summary>
                Minimum log level accepted by the Splunk sink
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogLevelAws">
            <summary>
            Minimum log level accepted by AWS Cloudwatch sink
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogFileType">
            <summary>
                Output files as text or Compact Json - defaults to text. If set to Json, <see cref="P:Lurgle.Logging.LoggingConfig.LogFormatFile" /> will not be
                used/>
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogDays">
            <summary>
                How many days log files will be retained - default is 31
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogFlush">
            <summary>
                How many seconds before log file writes are flushed to disk - default is 1
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogShared">
            <summary>
                Allow log file to be accessed in shared mode. Cannot be used with buffered mode.
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogBuffered">
            <summary>
                Allow log file to have buffered writes. Cannot be used with shared mode.
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogSeqServer">
            <summary>
                URL for the Seq server, eg. https://seq.domain.com
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogSeqApiKey">
            <summary>
                API key for Seq. If empty, an API key will not be used.
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogSeqUseProxy">
            <summary>
                Enable or disable proxy server for Seq
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogSeqProxyServer">
            <summary>
                Configure proxy server for Seq if <see cref="P:Lurgle.Logging.LoggingConfig.LogSeqUseProxy" /> is enabled
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogSeqProxyPort">
            <summary>
            Configure proxy port for Seq if <see cref="P:Lurgle.Logging.LoggingConfig.LogSeqUseProxy" /> is enabled
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogSeqBypassProxyOnLocal">
            <summary>
                Bypass proxy for local addresses
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogSeqProxyBypass">
            <summary>
                Bypass proxy for these addresses
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogSeqProxyUser">
            <summary>
                Optional username for proxy authentication
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogSeqProxyPassword">
            <summary>
                Password for proxy authentication
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogSplunkHost">
            <summary>
                URL for the Splunk server, eg. http://splunk.domain.com:8088/services/collector
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogSplunkToken">
            <summary>
                Event collector token for Splunk.
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogAwsProfile">
            <summary>
            AWS Profile config
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogAwsProfileLocation">
            <summary>
            AWS Profile Location
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogAwsKey">
            <summary>
            AWS Credentials - Key
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogAwsSecret">
            <summary>
            AWS Credentials - S3 Secret
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogAwsLogGroup">
            <summary>
            Log group for AWS Cloudwatch
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogAwsRegion">
            <summary>
            Region for AWS Cloudwatch
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogAwsCreateLogGroup">
            <summary>
            Create AWS Cloudwatch Log Group if it doesn't exist
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogAwsStreamPrefix">
            <summary>
            Optional AWS Cloudwatch Stream prefix
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogAwsStreamSuffix">
            <summary>
            Optional AWS Cloudwatch Stream prefix
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogFormatConsole">
            <summary>
                Logging format for the Console. Default is {Message}{NewLine}
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogFormatEvent">
            <summary>
                Logging format for the Event Log. Default is ({ThreadId}) {Message}{NewLine}{NewLine}{Exception}
            </summary>
        </member>
        <member name="P:Lurgle.Logging.LoggingConfig.LogFormatFile">
            <summary>
                Logging format for File logs. Default is {Timestamp:yyyy-MM-dd HH:mm:ss}: ({ThreadId}) [{Level}] {Message}{NewLine}
            </summary>
        </member>
        <member name="M:Lurgle.Logging.LoggingConfig.GetConfig(Lurgle.Logging.LoggingConfig)">
            <summary>
                Get a config. Optionally a LoggingConfig can be passed
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.LoggingConfig.GetEventLevel(System.String)">
            <summary>
                Parse the configured log level <see cref="T:System.String" /> into a <see cref="P:Lurgle.Logging.LoggingConfig.LogLevel" /> value
            </summary>
            <param name="configValue">Setting string</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.LoggingConfig.GetMaskProperties(System.String)">
            <summary>
                Parse a comma delimited list of property names to mask
            </summary>
            <param name="configValue"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.LoggingConfig.GetMaskPolicy(System.String)">
            <summary>
                Parse the configured mask policy into a <see cref="T:Lurgle.Logging.MaskPolicy" />
            </summary>
            <param name="configValue"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.LoggingConfig.GetChar(System.String)">
            <summary>
                Parse a config value into a single character string
            </summary>
            <param name="configValue"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.LoggingConfig.GetLogType(System.String)">
            <summary>
                Parse a comma-delimited logType <see cref="T:System.String" /> into a list of <see cref="T:Lurgle.Logging.LogType" />
            </summary>
            <param name="configValue">Setting string (comma-delimited)</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.LoggingConfig.GetConsoleTheme(Lurgle.Logging.ConsoleThemeType)">
            <summary>
                Parse a configured theme to a <see cref="T:Serilog.Sinks.SystemConsole.Themes.ConsoleTheme" />
            </summary>
            <param name="themeType"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.LoggingConfig.GetConsoleThemeType(Serilog.Sinks.SystemConsole.Themes.ConsoleTheme)">
            <summary>
                Return the <see cref="T:Lurgle.Logging.ConsoleThemeType" /> of a given <see cref="T:Serilog.Sinks.SystemConsole.Themes.ConsoleTheme" />
            </summary>
            <param name="theme"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.LoggingConfig.GetLogFileType(System.String)">
            <summary>
                Parse a config value to a <see cref="T:Lurgle.Logging.LogFileFormat" />
            </summary>
            <param name="configValue"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.LoggingConfig.GetInt(System.Object)">
            <summary>
                Convert the supplied <see cref="T:System.Object" /> to an <see cref="T:System.Int32" />
                <para />
                This will filter out nulls that could otherwise cause exceptions
            </summary>
            <param name="sourceObject">An object that can be converted to an int</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Logging.LoggingConfig.GetBool(System.Object,System.Boolean)">
            <summary>
                Convert the supplied <see cref="T:System.Object" /> to a <see cref="T:System.Boolean" />
                <para />
                This will filter out nulls that could otherwise cause exceptions
            </summary>
            <param name="sourceObject">An object that can be converted to a bool</param>
            <param name="trueIfEmpty">Return true if the object is empty</param>
            <returns></returns>
        </member>
    </members>
</doc>
